/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by main. DO NOT EDIT.

package v1beta1

import (
	"context"
	"time"

	"github.com/rancher/lasso/pkg/client"
	"github.com/rancher/lasso/pkg/controller"
	"github.com/rancher/wrangler/pkg/apply"
	"github.com/rancher/wrangler/pkg/condition"
	"github.com/rancher/wrangler/pkg/generic"
	"github.com/rancher/wrangler/pkg/kv"
	"k8s.io/apimachinery/pkg/api/equality"
	"k8s.io/apimachinery/pkg/api/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	"k8s.io/apimachinery/pkg/types"
	utilruntime "k8s.io/apimachinery/pkg/util/runtime"
	"k8s.io/apimachinery/pkg/watch"
	"k8s.io/client-go/tools/cache"
	v1beta1 "kubevirt.io/containerized-data-importer-api/pkg/apis/core/v1beta1"
)

type DataImportCronHandler func(string, *v1beta1.DataImportCron) (*v1beta1.DataImportCron, error)

type DataImportCronController interface {
	generic.ControllerMeta
	DataImportCronClient

	OnChange(ctx context.Context, name string, sync DataImportCronHandler)
	OnRemove(ctx context.Context, name string, sync DataImportCronHandler)
	Enqueue(namespace, name string)
	EnqueueAfter(namespace, name string, duration time.Duration)

	Cache() DataImportCronCache
}

type DataImportCronClient interface {
	Create(*v1beta1.DataImportCron) (*v1beta1.DataImportCron, error)
	Update(*v1beta1.DataImportCron) (*v1beta1.DataImportCron, error)
	UpdateStatus(*v1beta1.DataImportCron) (*v1beta1.DataImportCron, error)
	Delete(namespace, name string, options *metav1.DeleteOptions) error
	Get(namespace, name string, options metav1.GetOptions) (*v1beta1.DataImportCron, error)
	List(namespace string, opts metav1.ListOptions) (*v1beta1.DataImportCronList, error)
	Watch(namespace string, opts metav1.ListOptions) (watch.Interface, error)
	Patch(namespace, name string, pt types.PatchType, data []byte, subresources ...string) (result *v1beta1.DataImportCron, err error)
}

type DataImportCronCache interface {
	Get(namespace, name string) (*v1beta1.DataImportCron, error)
	List(namespace string, selector labels.Selector) ([]*v1beta1.DataImportCron, error)

	AddIndexer(indexName string, indexer DataImportCronIndexer)
	GetByIndex(indexName, key string) ([]*v1beta1.DataImportCron, error)
}

type DataImportCronIndexer func(obj *v1beta1.DataImportCron) ([]string, error)

type dataImportCronController struct {
	controller    controller.SharedController
	client        *client.Client
	gvk           schema.GroupVersionKind
	groupResource schema.GroupResource
}

func NewDataImportCronController(gvk schema.GroupVersionKind, resource string, namespaced bool, controller controller.SharedControllerFactory) DataImportCronController {
	c := controller.ForResourceKind(gvk.GroupVersion().WithResource(resource), gvk.Kind, namespaced)
	return &dataImportCronController{
		controller: c,
		client:     c.Client(),
		gvk:        gvk,
		groupResource: schema.GroupResource{
			Group:    gvk.Group,
			Resource: resource,
		},
	}
}

func FromDataImportCronHandlerToHandler(sync DataImportCronHandler) generic.Handler {
	return func(key string, obj runtime.Object) (ret runtime.Object, err error) {
		var v *v1beta1.DataImportCron
		if obj == nil {
			v, err = sync(key, nil)
		} else {
			v, err = sync(key, obj.(*v1beta1.DataImportCron))
		}
		if v == nil {
			return nil, err
		}
		return v, err
	}
}

func (c *dataImportCronController) Updater() generic.Updater {
	return func(obj runtime.Object) (runtime.Object, error) {
		newObj, err := c.Update(obj.(*v1beta1.DataImportCron))
		if newObj == nil {
			return nil, err
		}
		return newObj, err
	}
}

func UpdateDataImportCronDeepCopyOnChange(client DataImportCronClient, obj *v1beta1.DataImportCron, handler func(obj *v1beta1.DataImportCron) (*v1beta1.DataImportCron, error)) (*v1beta1.DataImportCron, error) {
	if obj == nil {
		return obj, nil
	}

	copyObj := obj.DeepCopy()
	newObj, err := handler(copyObj)
	if newObj != nil {
		copyObj = newObj
	}
	if obj.ResourceVersion == copyObj.ResourceVersion && !equality.Semantic.DeepEqual(obj, copyObj) {
		return client.Update(copyObj)
	}

	return copyObj, err
}

func (c *dataImportCronController) AddGenericHandler(ctx context.Context, name string, handler generic.Handler) {
	c.controller.RegisterHandler(ctx, name, controller.SharedControllerHandlerFunc(handler))
}

func (c *dataImportCronController) AddGenericRemoveHandler(ctx context.Context, name string, handler generic.Handler) {
	c.AddGenericHandler(ctx, name, generic.NewRemoveHandler(name, c.Updater(), handler))
}

func (c *dataImportCronController) OnChange(ctx context.Context, name string, sync DataImportCronHandler) {
	c.AddGenericHandler(ctx, name, FromDataImportCronHandlerToHandler(sync))
}

func (c *dataImportCronController) OnRemove(ctx context.Context, name string, sync DataImportCronHandler) {
	c.AddGenericHandler(ctx, name, generic.NewRemoveHandler(name, c.Updater(), FromDataImportCronHandlerToHandler(sync)))
}

func (c *dataImportCronController) Enqueue(namespace, name string) {
	c.controller.Enqueue(namespace, name)
}

func (c *dataImportCronController) EnqueueAfter(namespace, name string, duration time.Duration) {
	c.controller.EnqueueAfter(namespace, name, duration)
}

func (c *dataImportCronController) Informer() cache.SharedIndexInformer {
	return c.controller.Informer()
}

func (c *dataImportCronController) GroupVersionKind() schema.GroupVersionKind {
	return c.gvk
}

func (c *dataImportCronController) Cache() DataImportCronCache {
	return &dataImportCronCache{
		indexer:  c.Informer().GetIndexer(),
		resource: c.groupResource,
	}
}

func (c *dataImportCronController) Create(obj *v1beta1.DataImportCron) (*v1beta1.DataImportCron, error) {
	result := &v1beta1.DataImportCron{}
	return result, c.client.Create(context.TODO(), obj.Namespace, obj, result, metav1.CreateOptions{})
}

func (c *dataImportCronController) Update(obj *v1beta1.DataImportCron) (*v1beta1.DataImportCron, error) {
	result := &v1beta1.DataImportCron{}
	return result, c.client.Update(context.TODO(), obj.Namespace, obj, result, metav1.UpdateOptions{})
}

func (c *dataImportCronController) UpdateStatus(obj *v1beta1.DataImportCron) (*v1beta1.DataImportCron, error) {
	result := &v1beta1.DataImportCron{}
	return result, c.client.UpdateStatus(context.TODO(), obj.Namespace, obj, result, metav1.UpdateOptions{})
}

func (c *dataImportCronController) Delete(namespace, name string, options *metav1.DeleteOptions) error {
	if options == nil {
		options = &metav1.DeleteOptions{}
	}
	return c.client.Delete(context.TODO(), namespace, name, *options)
}

func (c *dataImportCronController) Get(namespace, name string, options metav1.GetOptions) (*v1beta1.DataImportCron, error) {
	result := &v1beta1.DataImportCron{}
	return result, c.client.Get(context.TODO(), namespace, name, result, options)
}

func (c *dataImportCronController) List(namespace string, opts metav1.ListOptions) (*v1beta1.DataImportCronList, error) {
	result := &v1beta1.DataImportCronList{}
	return result, c.client.List(context.TODO(), namespace, result, opts)
}

func (c *dataImportCronController) Watch(namespace string, opts metav1.ListOptions) (watch.Interface, error) {
	return c.client.Watch(context.TODO(), namespace, opts)
}

func (c *dataImportCronController) Patch(namespace, name string, pt types.PatchType, data []byte, subresources ...string) (*v1beta1.DataImportCron, error) {
	result := &v1beta1.DataImportCron{}
	return result, c.client.Patch(context.TODO(), namespace, name, pt, data, result, metav1.PatchOptions{}, subresources...)
}

type dataImportCronCache struct {
	indexer  cache.Indexer
	resource schema.GroupResource
}

func (c *dataImportCronCache) Get(namespace, name string) (*v1beta1.DataImportCron, error) {
	obj, exists, err := c.indexer.GetByKey(namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(c.resource, name)
	}
	return obj.(*v1beta1.DataImportCron), nil
}

func (c *dataImportCronCache) List(namespace string, selector labels.Selector) (ret []*v1beta1.DataImportCron, err error) {

	err = cache.ListAllByNamespace(c.indexer, namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.DataImportCron))
	})

	return ret, err
}

func (c *dataImportCronCache) AddIndexer(indexName string, indexer DataImportCronIndexer) {
	utilruntime.Must(c.indexer.AddIndexers(map[string]cache.IndexFunc{
		indexName: func(obj interface{}) (strings []string, e error) {
			return indexer(obj.(*v1beta1.DataImportCron))
		},
	}))
}

func (c *dataImportCronCache) GetByIndex(indexName, key string) (result []*v1beta1.DataImportCron, err error) {
	objs, err := c.indexer.ByIndex(indexName, key)
	if err != nil {
		return nil, err
	}
	result = make([]*v1beta1.DataImportCron, 0, len(objs))
	for _, obj := range objs {
		result = append(result, obj.(*v1beta1.DataImportCron))
	}
	return result, nil
}

type DataImportCronStatusHandler func(obj *v1beta1.DataImportCron, status v1beta1.DataImportCronStatus) (v1beta1.DataImportCronStatus, error)

type DataImportCronGeneratingHandler func(obj *v1beta1.DataImportCron, status v1beta1.DataImportCronStatus) ([]runtime.Object, v1beta1.DataImportCronStatus, error)

func RegisterDataImportCronStatusHandler(ctx context.Context, controller DataImportCronController, condition condition.Cond, name string, handler DataImportCronStatusHandler) {
	statusHandler := &dataImportCronStatusHandler{
		client:    controller,
		condition: condition,
		handler:   handler,
	}
	controller.AddGenericHandler(ctx, name, FromDataImportCronHandlerToHandler(statusHandler.sync))
}

func RegisterDataImportCronGeneratingHandler(ctx context.Context, controller DataImportCronController, apply apply.Apply,
	condition condition.Cond, name string, handler DataImportCronGeneratingHandler, opts *generic.GeneratingHandlerOptions) {
	statusHandler := &dataImportCronGeneratingHandler{
		DataImportCronGeneratingHandler: handler,
		apply:                           apply,
		name:                            name,
		gvk:                             controller.GroupVersionKind(),
	}
	if opts != nil {
		statusHandler.opts = *opts
	}
	controller.OnChange(ctx, name, statusHandler.Remove)
	RegisterDataImportCronStatusHandler(ctx, controller, condition, name, statusHandler.Handle)
}

type dataImportCronStatusHandler struct {
	client    DataImportCronClient
	condition condition.Cond
	handler   DataImportCronStatusHandler
}

func (a *dataImportCronStatusHandler) sync(key string, obj *v1beta1.DataImportCron) (*v1beta1.DataImportCron, error) {
	if obj == nil {
		return obj, nil
	}

	origStatus := obj.Status.DeepCopy()
	obj = obj.DeepCopy()
	newStatus, err := a.handler(obj, obj.Status)
	if err != nil {
		// Revert to old status on error
		newStatus = *origStatus.DeepCopy()
	}

	if a.condition != "" {
		if errors.IsConflict(err) {
			a.condition.SetError(&newStatus, "", nil)
		} else {
			a.condition.SetError(&newStatus, "", err)
		}
	}
	if !equality.Semantic.DeepEqual(origStatus, &newStatus) {
		if a.condition != "" {
			// Since status has changed, update the lastUpdatedTime
			a.condition.LastUpdated(&newStatus, time.Now().UTC().Format(time.RFC3339))
		}

		var newErr error
		obj.Status = newStatus
		newObj, newErr := a.client.UpdateStatus(obj)
		if err == nil {
			err = newErr
		}
		if newErr == nil {
			obj = newObj
		}
	}
	return obj, err
}

type dataImportCronGeneratingHandler struct {
	DataImportCronGeneratingHandler
	apply apply.Apply
	opts  generic.GeneratingHandlerOptions
	gvk   schema.GroupVersionKind
	name  string
}

func (a *dataImportCronGeneratingHandler) Remove(key string, obj *v1beta1.DataImportCron) (*v1beta1.DataImportCron, error) {
	if obj != nil {
		return obj, nil
	}

	obj = &v1beta1.DataImportCron{}
	obj.Namespace, obj.Name = kv.RSplit(key, "/")
	obj.SetGroupVersionKind(a.gvk)

	return nil, generic.ConfigureApplyForObject(a.apply, obj, &a.opts).
		WithOwner(obj).
		WithSetID(a.name).
		ApplyObjects()
}

func (a *dataImportCronGeneratingHandler) Handle(obj *v1beta1.DataImportCron, status v1beta1.DataImportCronStatus) (v1beta1.DataImportCronStatus, error) {
	if !obj.DeletionTimestamp.IsZero() {
		return status, nil
	}

	objs, newStatus, err := a.DataImportCronGeneratingHandler(obj, status)
	if err != nil {
		return newStatus, err
	}

	return newStatus, generic.ConfigureApplyForObject(a.apply, obj, &a.opts).
		WithOwner(obj).
		WithSetID(a.name).
		ApplyObjects(objs...)
}
